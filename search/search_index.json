{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CoderDojo Twin Cities Micropython This GitHub repository is for sharing teaching resources to teach Micropython 12-14 years old. Course Outline Introduction - Overview of Micropython and why we love it. Concepts - Key concepts in Micropython. Blink - Blink an LED. Servo - Move a Servo. Glossary of Micropython Terms Micropython References - links to other useful sites.","title":"CoderDojo Twin Cities Micropython"},{"location":"#coderdojo-twin-cities-micropython","text":"This GitHub repository is for sharing teaching resources to teach Micropython 12-14 years old.","title":"CoderDojo Twin Cities Micropython"},{"location":"#course-outline","text":"Introduction - Overview of Micropython and why we love it. Concepts - Key concepts in Micropython. Blink - Blink an LED. Servo - Move a Servo. Glossary of Micropython Terms Micropython References - links to other useful sites.","title":"Course Outline"},{"location":"01-intro/","text":"Introduction to Micropython What is Micropython Why we love it Virtual emulators Hardware Costs Connections","title":"Introduction"},{"location":"01-intro/#introduction-to-micropython","text":"What is Micropython Why we love it Virtual emulators Hardware Costs Connections","title":"Introduction to Micropython"},{"location":"02-boards/","text":"Micropython Boards Technically, any computer that has at least 16K of RAM can run Micropython. ESP32 ESP32 - $5 to $21 Raspberry Pi Pico Raspberry Pi Pico (../glossary.md#ESP32) - $4 Getting Machine Statistics 1 2 import machine help ( machine )","title":"Boards"},{"location":"02-boards/#micropython-boards","text":"Technically, any computer that has at least 16K of RAM can run Micropython.","title":"Micropython Boards"},{"location":"02-boards/#esp32","text":"ESP32 - $5 to $21","title":"ESP32"},{"location":"02-boards/#raspberry-pi-pico","text":"Raspberry Pi Pico (../glossary.md#ESP32) - $4","title":"Raspberry Pi Pico"},{"location":"02-boards/#getting-machine-statistics","text":"1 2 import machine help ( machine )","title":"Getting Machine Statistics"},{"location":"02-pi-pico/","text":"Getting Started with the Raspberry Pi Pico The Raspberry Pi Pico is a custom silicon microcontroller built by the Raspberry Pi Foundation with a retail list prices of $4. With 264K SRAM, it has around 100 times the RAM of an Arduino Uno (2K). It is ideal for projects that need more RAM such as project that require drawing to an OLED display. Specs RP2040 microcontroller chip designed by Raspberry Pi in the United Kingdom Dual-core Arm Cortex M0+ processor, flexible clock running up to 133 MHz 264KB of SRAM, and 2MB of on-board Flash memory Castellated module allows soldering direct to carrier boards USB 1.1 with device and host support Low-power sleep and dormant modes Drag-and-drop programming using mass storage over USB 26 \u00d7 multi-function GPIO pins 2 \u00d7 SPI, 2 \u00d7 I2C, 2 \u00d7 UART, 3 \u00d7 12-bit ADC, 16 \u00d7 controllable PWM channels Accurate clock and timer on-chip Temperature sensor Accelerated floating-point libraries on-chip 8 \u00d7 Programmable I/O (PIO) state machines for custom peripheral support Pico Pinout Steps on Mac Download the MicroPython UF2 file by clicking the button below. Push and hold the BOOTSEL button and plug your Pico into the USB port of your Raspberry Pi or other computer. Release the BOOTSEL button after your Pico is connected. It will mount as a Mass Storage Device called RPI-RP2. Drag and drop the MicroPython UF2 file onto the RPI-RP2 volume. Your Pico will reboot. You are now running MicroPython. Using Thonny Thonny is a free lightweight Python development tool. Download the Thonny Application Download the Thonny Pico driver Configure Thonny to use the Pico interpreter Test using the help() function Test by running a blink application 1 2 3 4 5 6 7 8 9 from machine import Pin import utime # right uppermost pin with USB on the left led = Pin ( 16 , Pin . OUT ) led . low () while True : led . toggle () utime . sleep ( 1 ) Press the Play Button References Getting Started Guide Raspberry Pi Getting Started Book PDF Commons Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)","title":"Getting Started with the Raspberry Pi Pico"},{"location":"02-pi-pico/#getting-started-with-the-raspberry-pi-pico","text":"The Raspberry Pi Pico is a custom silicon microcontroller built by the Raspberry Pi Foundation with a retail list prices of $4. With 264K SRAM, it has around 100 times the RAM of an Arduino Uno (2K). It is ideal for projects that need more RAM such as project that require drawing to an OLED display.","title":"Getting Started with the Raspberry Pi Pico"},{"location":"02-pi-pico/#specs","text":"RP2040 microcontroller chip designed by Raspberry Pi in the United Kingdom Dual-core Arm Cortex M0+ processor, flexible clock running up to 133 MHz 264KB of SRAM, and 2MB of on-board Flash memory Castellated module allows soldering direct to carrier boards USB 1.1 with device and host support Low-power sleep and dormant modes Drag-and-drop programming using mass storage over USB 26 \u00d7 multi-function GPIO pins 2 \u00d7 SPI, 2 \u00d7 I2C, 2 \u00d7 UART, 3 \u00d7 12-bit ADC, 16 \u00d7 controllable PWM channels Accurate clock and timer on-chip Temperature sensor Accelerated floating-point libraries on-chip 8 \u00d7 Programmable I/O (PIO) state machines for custom peripheral support","title":"Specs"},{"location":"02-pi-pico/#pico-pinout","text":"","title":"Pico Pinout"},{"location":"02-pi-pico/#steps-on-mac","text":"Download the MicroPython UF2 file by clicking the button below. Push and hold the BOOTSEL button and plug your Pico into the USB port of your Raspberry Pi or other computer. Release the BOOTSEL button after your Pico is connected. It will mount as a Mass Storage Device called RPI-RP2. Drag and drop the MicroPython UF2 file onto the RPI-RP2 volume. Your Pico will reboot. You are now running MicroPython.","title":"Steps on Mac"},{"location":"02-pi-pico/#using-thonny","text":"Thonny is a free lightweight Python development tool. Download the Thonny Application Download the Thonny Pico driver Configure Thonny to use the Pico interpreter Test using the help() function Test by running a blink application 1 2 3 4 5 6 7 8 9 from machine import Pin import utime # right uppermost pin with USB on the left led = Pin ( 16 , Pin . OUT ) led . low () while True : led . toggle () utime . sleep ( 1 ) Press the Play Button","title":"Using Thonny"},{"location":"02-pi-pico/#references","text":"","title":"References"},{"location":"02-pi-pico/#getting-started-guide","text":"Raspberry Pi Getting Started","title":"Getting Started Guide"},{"location":"02-pi-pico/#book-pdf","text":"Commons Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)","title":"Book PDF"},{"location":"03-blink/","text":"Blink in Micropython Overview In this lab, we will use Micropython to make an LED blink on and off using Python. Virual Lab Unicorn Emulator Sample Program 1 2 3 4 5 6 7 8 9 10 import machine import time led = machine . Pin ( 15 , machine . Pin . OUT ) # loop forever while True : led . high () time . sleep ( 0.5 ) led . low () time . sleep ( 0.5 )","title":"Blink"},{"location":"03-blink/#blink-in-micropython","text":"","title":"Blink in Micropython"},{"location":"03-blink/#overview","text":"In this lab, we will use Micropython to make an LED blink on and off using Python.","title":"Overview"},{"location":"03-blink/#virual-lab","text":"Unicorn Emulator","title":"Virual Lab"},{"location":"03-blink/#sample-program","text":"1 2 3 4 5 6 7 8 9 10 import machine import time led = machine . Pin ( 15 , machine . Pin . OUT ) # loop forever while True : led . high () time . sleep ( 0.5 ) led . low () time . sleep ( 0.5 )","title":"Sample Program"},{"location":"04-servo/","text":"Micropython Servo Lab 1 2 3 4 5 6 7 import machine import pyb # The pyboard has four simple servo connections servo = pyb . Servo ( 1 ) servo . angle ( 90 , 5000 )","title":"Servo"},{"location":"04-servo/#micropython-servo-lab","text":"1 2 3 4 5 6 7 import machine import pyb # The pyboard has four simple servo connections servo = pyb . Servo ( 1 ) servo . angle ( 90 , 5000 )","title":"Micropython Servo Lab"},{"location":"10-display/","text":"","title":"10 display"},{"location":"contact/","text":"Cybersecurity for Kids Contacts General Code Savvy Contact kidscode@codesavvy.org Contact for CoderDojo Twin Cities hello@coderdojotc.org Specific questions on this repository Dan McCreary","title":"Contact"},{"location":"contact/#cybersecurity-for-kids-contacts","text":"","title":"Cybersecurity for Kids Contacts"},{"location":"contact/#general-code-savvy-contact","text":"kidscode@codesavvy.org","title":"General Code Savvy Contact"},{"location":"contact/#contact-for-coderdojo-twin-cities","text":"hello@coderdojotc.org","title":"Contact for CoderDojo Twin Cities"},{"location":"contact/#specific-questions-on-this-repository","text":"Dan McCreary","title":"Specific questions on this repository"},{"location":"glossary/","text":"Micropython Glossary of Terms ESP32 A series of low-cost, low-power system on a chip microcontrollers with integrated Wi-Fi and dual-mode Bluetooth. Typical costs for the ESP32 is Sample on eBay $5 Sample on Amazon $11 Sample on Sparkfun $21 ESP32 Quick Reference Raspberry Pi Foundation Raspberry Pi Pico A microcontroller designed by the Raspberry Pi foundation for doing real-time control systems. The Pico was Pico Pinout Unicorn MicroPython on Unicorn is completely open source Micropython emulator Github Repo: https://github.com/micropython/micropython-unicorn","title":"Glossary"},{"location":"glossary/#micropython-glossary-of-terms","text":"","title":"Micropython Glossary of Terms"},{"location":"glossary/#esp32","text":"A series of low-cost, low-power system on a chip microcontrollers with integrated Wi-Fi and dual-mode Bluetooth. Typical costs for the ESP32 is Sample on eBay $5 Sample on Amazon $11 Sample on Sparkfun $21 ESP32 Quick Reference","title":"ESP32"},{"location":"glossary/#raspberry-pi-foundation","text":"","title":"Raspberry Pi Foundation"},{"location":"glossary/#raspberry-pi-pico","text":"A microcontroller designed by the Raspberry Pi foundation for doing real-time control systems. The Pico was","title":"Raspberry Pi Pico"},{"location":"glossary/#pico-pinout","text":"","title":"Pico Pinout"},{"location":"glossary/#unicorn","text":"MicroPython on Unicorn is completely open source Micropython emulator Github Repo: https://github.com/micropython/micropython-unicorn","title":"Unicorn"},{"location":"references/","text":"Microptyhon References http://micropython.org/","title":"References"},{"location":"references/#microptyhon-references","text":"http://micropython.org/","title":"Microptyhon References"}]}