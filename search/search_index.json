{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CoderDojo Twin Cities Micropython \u00b6 This GitHub repository is for sharing teaching resources to teach Micropython 10-16 years old. Course Outline \u00b6 Introduction - Overview of Micropython and why we love it. Boards - Description of popular development boards that support Micropython (Pico and ESP32). How to choose the right microcontroller for your project. Raspberry Pi Pico - Details the Raspberry Pi Pico including features and pinouts. Thonny IDE - Thonny is an IDE that supports Micropython. We review the parts of the User interface. Blink - Blink an LED on and off. This is the equivalent of the \"Hello World!\" program in micropython. Servo - Move a Servo. Glossary of Micropython Terms Contact Micropython References - links to other useful sites.","title":"Micropython Home"},{"location":"#coderdojo-twin-cities-micropython","text":"This GitHub repository is for sharing teaching resources to teach Micropython 10-16 years old.","title":"CoderDojo Twin Cities Micropython"},{"location":"#course-outline","text":"Introduction - Overview of Micropython and why we love it. Boards - Description of popular development boards that support Micropython (Pico and ESP32). How to choose the right microcontroller for your project. Raspberry Pi Pico - Details the Raspberry Pi Pico including features and pinouts. Thonny IDE - Thonny is an IDE that supports Micropython. We review the parts of the User interface. Blink - Blink an LED on and off. This is the equivalent of the \"Hello World!\" program in micropython. Servo - Move a Servo. Glossary of Micropython Terms Contact Micropython References - links to other useful sites.","title":"Course Outline"},{"location":"01-intro/","text":"Introduction to MicroPython \u00b6 Welcome to the CoderDojo course on MicroPython. This course is about MicroPython , a variation of the popular Python programming language that is used to program microcontrollers . Intended Audience \u00b6 Our target audience is students age 10-16 that are in Junior High or High School that have basic keyboarding skills. For example, students will need to be able to select, copy and paste text from the examples into their own code. This course is appropriate for students that already have a basic understanding of the Python programming language. We strongly suggest you take the Introduction to Python Programming CoderDojo Course if you are not familiar with Python. What is Micropython Why we love it Virtual emulators Hardware Costs Connections License of Content \u00b6 Our intent is to allow teachers around the world to integrate MicroPython into their courses without any fees. We want you to be able to use this content freely with a few conditions: you give us attribution and you don't resell our content for profit. Note that we use the same Creative Commons licensing as the Raspberry Pi Foundation and the CoderDojo Foundation: Creative Commons Attribution NonCommercial ShareAlike This means you are free to reuse and remix this content for non-commercial educational purposes as long as you keep the attribution. You may also use the content on this site to train your own language models as long as those language models are not sold for commercial profit.","title":"Introduction"},{"location":"01-intro/#introduction-to-micropython","text":"Welcome to the CoderDojo course on MicroPython. This course is about MicroPython , a variation of the popular Python programming language that is used to program microcontrollers .","title":"Introduction to MicroPython"},{"location":"01-intro/#intended-audience","text":"Our target audience is students age 10-16 that are in Junior High or High School that have basic keyboarding skills. For example, students will need to be able to select, copy and paste text from the examples into their own code. This course is appropriate for students that already have a basic understanding of the Python programming language. We strongly suggest you take the Introduction to Python Programming CoderDojo Course if you are not familiar with Python. What is Micropython Why we love it Virtual emulators Hardware Costs Connections","title":"Intended Audience"},{"location":"01-intro/#license-of-content","text":"Our intent is to allow teachers around the world to integrate MicroPython into their courses without any fees. We want you to be able to use this content freely with a few conditions: you give us attribution and you don't resell our content for profit. Note that we use the same Creative Commons licensing as the Raspberry Pi Foundation and the CoderDojo Foundation: Creative Commons Attribution NonCommercial ShareAlike This means you are free to reuse and remix this content for non-commercial educational purposes as long as you keep the attribution. You may also use the content on this site to train your own language models as long as those language models are not sold for commercial profit.","title":"License of Content"},{"location":"01a-microcontrollers/","text":"Microcontrollers \u00b6 This lesson is an overview of microcontrollers and their role in teaching [physical computing(https://en.wikipedia.org/wiki/Physical_computing). A microcontrollers is a small low-cost computer used to control physical devices such as LED, servos and motors. Microcontroller boards typically cost around $4 to $6 and are an ideal way to learn about computer science because you can use them to build fun projects. For example you can control a row of LEDs, move a robot and sense the world around us with a variety of light, sound and motion sensors. In the past, microcontrollers were difficult for younger students to program. They were also too expensive for every student to purchase and take home. A typical Arduino kit could easily cost over $20 and required you to learn C to program it. Today, microcontrollsers such as the Raspberry Pi Pico and the ESP32 cost as little as two dollars. And these devices are designed to be programmed in Python, the most popular programming language for students. What is Physical Computing? \u00b6 Physical Computing is a field of study that can sense and respond to the world around us. Unlike programming a cell phone or a laptop computer, our focus is reading sensor values and quickly responding to changes. Physical Computing is widely used to teach principals of computer science because students can create their own projects and express creativity such a controlling the patterns of lights or creating complex sounds. How Microcontrollsers are Used \u00b6 Microcontrollers do three things: They read sensor values of the world around them They transform this data into useful representations They send outputs to devices that control the world such as LEDs and motors as well as displays Here is a general diagram to think about when you are designing microcontroller systems: Here is a specific example instance of what inputs and outputs might do. Programming a Microcontroller \u00b6 In this class, we will use the MicroPython to program our Microcontrollers. Our programs will usually have the following structure: Imports: Specify the right Python libraries Setup: Setup initial data structures Main loop: Continuously monitor inputs and take actions The following is a small example of this code in Micropython: 1 2 3 4 5 6 7 8 9 10 11 12 13 # Import Section import machine import time # Setup Section led = machine . Pin ( 16 , machine . Pin . OUT ) # Main Loop while True : led . high () time . sleep ( 0.5 ) led . low () time . sleep ( 0.5 ) Almost all our programs will start with the import machine line. This tells the system that we need to gather all the libraries that understand our physical machine.","title":"Microcontrollers"},{"location":"01a-microcontrollers/#microcontrollers","text":"This lesson is an overview of microcontrollers and their role in teaching [physical computing(https://en.wikipedia.org/wiki/Physical_computing). A microcontrollers is a small low-cost computer used to control physical devices such as LED, servos and motors. Microcontroller boards typically cost around $4 to $6 and are an ideal way to learn about computer science because you can use them to build fun projects. For example you can control a row of LEDs, move a robot and sense the world around us with a variety of light, sound and motion sensors. In the past, microcontrollers were difficult for younger students to program. They were also too expensive for every student to purchase and take home. A typical Arduino kit could easily cost over $20 and required you to learn C to program it. Today, microcontrollsers such as the Raspberry Pi Pico and the ESP32 cost as little as two dollars. And these devices are designed to be programmed in Python, the most popular programming language for students.","title":"Microcontrollers"},{"location":"01a-microcontrollers/#what-is-physical-computing","text":"Physical Computing is a field of study that can sense and respond to the world around us. Unlike programming a cell phone or a laptop computer, our focus is reading sensor values and quickly responding to changes. Physical Computing is widely used to teach principals of computer science because students can create their own projects and express creativity such a controlling the patterns of lights or creating complex sounds.","title":"What is Physical Computing?"},{"location":"01a-microcontrollers/#how-microcontrollsers-are-used","text":"Microcontrollers do three things: They read sensor values of the world around them They transform this data into useful representations They send outputs to devices that control the world such as LEDs and motors as well as displays Here is a general diagram to think about when you are designing microcontroller systems: Here is a specific example instance of what inputs and outputs might do.","title":"How Microcontrollsers are Used"},{"location":"01a-microcontrollers/#programming-a-microcontroller","text":"In this class, we will use the MicroPython to program our Microcontrollers. Our programs will usually have the following structure: Imports: Specify the right Python libraries Setup: Setup initial data structures Main loop: Continuously monitor inputs and take actions The following is a small example of this code in Micropython: 1 2 3 4 5 6 7 8 9 10 11 12 13 # Import Section import machine import time # Setup Section led = machine . Pin ( 16 , machine . Pin . OUT ) # Main Loop while True : led . high () time . sleep ( 0.5 ) led . low () time . sleep ( 0.5 ) Almost all our programs will start with the import machine line. This tells the system that we need to gather all the libraries that understand our physical machine.","title":"Programming a Microcontroller"},{"location":"02-boards/","text":"Micropython Boards \u00b6 Technically, any computer that has at least 16K of RAM can run Micropython. ESP32 \u00b6 ESP32 - $5 to $21 Raspberry Pi Pico \u00b6 Raspberry Pi Pico (../glossary.md#ESP32) - $4 Getting Machine Statistics \u00b6 1 2 import machine help ( machine )","title":"Boards"},{"location":"02-boards/#micropython-boards","text":"Technically, any computer that has at least 16K of RAM can run Micropython.","title":"Micropython Boards"},{"location":"02-boards/#esp32","text":"ESP32 - $5 to $21","title":"ESP32"},{"location":"02-boards/#raspberry-pi-pico","text":"Raspberry Pi Pico (../glossary.md#ESP32) - $4","title":"Raspberry Pi Pico"},{"location":"02-boards/#getting-machine-statistics","text":"1 2 import machine help ( machine )","title":"Getting Machine Statistics"},{"location":"02-pi-pico/","text":"Getting Started with the Raspberry Pi Pico \u00b6 The Raspberry Pi Pico is a custom silicon microcontroller built by the Raspberry Pi Foundation with a retail list prices of $4. With 264K SRAM, it has around 100 times the RAM of an Arduino Uno (2K). It is ideal for projects that need more RAM such as project that require drawing to an OLED display. Specs \u00b6 RP2040 microcontroller chip designed by Raspberry Pi in the United Kingdom Dual-core Arm Cortex M0+ processor, flexible clock running up to 133 MHz 264KB of SRAM, and 2MB of on-board Flash memory Castellated module allows soldering direct to carrier boards USB 1.1 with device and host support Low-power sleep and dormant modes Drag-and-drop programming using mass storage over USB 26 \u00d7 multi-function GPIO pins 2 \u00d7 SPI, 2 \u00d7 I2C, 2 \u00d7 UART, 3 \u00d7 12-bit ADC, 16 \u00d7 controllable PWM channels Accurate clock and timer on-chip Temperature sensor Accelerated floating-point libraries on-chip 8 \u00d7 Programmable I/O (PIO) state machines for custom peripheral support Pico Pinout \u00b6 The pinout diagram for the Raspberry Pi. It features: * 26 \u00d7 multi-function GPIO pins * 2 \u00d7 SPI, 2 \u00d7 I2C, 2 \u00d7 UART, 3 \u00d7 12-bit ADC, 16 \u00d7 controllable PWM * Pinout PDF Pins are numbered 0-29, and 26-29 have ADC capabilities Pin IO modes are: Pin.IN, Pin.OUT, Pin.ALT Pin pull modes are: Pin.PULL_UP, Pin.PULL_DOWN Steps To Get Micropython Running on the Mac \u00b6 Download the MicroPython UF2 file. Push and hold the BOOTSEL button and plug your Pico into the USB port of your Raspberry Pi or other computer. Release the BOOTSEL button after your Pico is connected. It will mount as a Mass Storage Device called RPI-RP2. Drag and drop the MicroPython UF2 file onto the RPI-RP2 volume. Your Pico will reboot. You are now running MicroPython. Using Thonny \u00b6 Thonny is a free lightweight Python development tool. Download the Thonny Application Download the Thonny Pico driver Configure Thonny to use the Pico interpreter Test using the help() function Test by running a blink application 1 2 3 4 5 6 7 8 9 from machine import Pin import utime # right uppermost pin with USB on the left led = Pin ( 16 , Pin . OUT ) led . low () while True : led . toggle () utime . sleep ( 1 ) Press the Play Button References \u00b6 Getting Started Guide \u00b6 Raspberry Pi Getting Started Book PDF \u00b6 Commons Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)","title":"Raspberry Pi Pico"},{"location":"02-pi-pico/#getting-started-with-the-raspberry-pi-pico","text":"The Raspberry Pi Pico is a custom silicon microcontroller built by the Raspberry Pi Foundation with a retail list prices of $4. With 264K SRAM, it has around 100 times the RAM of an Arduino Uno (2K). It is ideal for projects that need more RAM such as project that require drawing to an OLED display.","title":"Getting Started with the Raspberry Pi Pico"},{"location":"02-pi-pico/#specs","text":"RP2040 microcontroller chip designed by Raspberry Pi in the United Kingdom Dual-core Arm Cortex M0+ processor, flexible clock running up to 133 MHz 264KB of SRAM, and 2MB of on-board Flash memory Castellated module allows soldering direct to carrier boards USB 1.1 with device and host support Low-power sleep and dormant modes Drag-and-drop programming using mass storage over USB 26 \u00d7 multi-function GPIO pins 2 \u00d7 SPI, 2 \u00d7 I2C, 2 \u00d7 UART, 3 \u00d7 12-bit ADC, 16 \u00d7 controllable PWM channels Accurate clock and timer on-chip Temperature sensor Accelerated floating-point libraries on-chip 8 \u00d7 Programmable I/O (PIO) state machines for custom peripheral support","title":"Specs"},{"location":"02-pi-pico/#pico-pinout","text":"The pinout diagram for the Raspberry Pi. It features: * 26 \u00d7 multi-function GPIO pins * 2 \u00d7 SPI, 2 \u00d7 I2C, 2 \u00d7 UART, 3 \u00d7 12-bit ADC, 16 \u00d7 controllable PWM * Pinout PDF Pins are numbered 0-29, and 26-29 have ADC capabilities Pin IO modes are: Pin.IN, Pin.OUT, Pin.ALT Pin pull modes are: Pin.PULL_UP, Pin.PULL_DOWN","title":"Pico Pinout"},{"location":"02-pi-pico/#steps-to-get-micropython-running-on-the-mac","text":"Download the MicroPython UF2 file. Push and hold the BOOTSEL button and plug your Pico into the USB port of your Raspberry Pi or other computer. Release the BOOTSEL button after your Pico is connected. It will mount as a Mass Storage Device called RPI-RP2. Drag and drop the MicroPython UF2 file onto the RPI-RP2 volume. Your Pico will reboot. You are now running MicroPython.","title":"Steps To Get Micropython Running on the Mac"},{"location":"02-pi-pico/#using-thonny","text":"Thonny is a free lightweight Python development tool. Download the Thonny Application Download the Thonny Pico driver Configure Thonny to use the Pico interpreter Test using the help() function Test by running a blink application 1 2 3 4 5 6 7 8 9 from machine import Pin import utime # right uppermost pin with USB on the left led = Pin ( 16 , Pin . OUT ) led . low () while True : led . toggle () utime . sleep ( 1 ) Press the Play Button","title":"Using Thonny"},{"location":"02-pi-pico/#references","text":"","title":"References"},{"location":"02-pi-pico/#getting-started-guide","text":"Raspberry Pi Getting Started","title":"Getting Started Guide"},{"location":"02-pi-pico/#book-pdf","text":"Commons Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)","title":"Book PDF"},{"location":"02c-thonny/","text":"Thonny Python IDE \u00b6 A lightweight Python IDE ideal for writing simple Python programs for first time users. Thonny has the following screen areas. Toolbar \u00b6 Script Area \u00b6 Python Shell \u00b6 Interpreter \u00b6 Thonny runs on Mac, Windows and Linux. Running help() \u00b6 You can enter the help() function in the main script area and then press the Play button. This will tell you 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 MicroPython v1 .14 on 2021 - 02 - 02 ; Raspberry Pi Pico with RP2040 Type \"help()\" for more information . >>> % Run - c $ EDITOR_CONTENT Welcome to MicroPython ! For online help please visit https : // micropython . org / help / . For access to the hardware use the 'machine' module . RP2 specific commands are in the 'rp2' module . Quick overview of some objects : machine . Pin ( pin ) -- get a pin , eg machine . Pin ( 0 ) machine . Pin ( pin , m , [ p ] ) -- get a pin and configure it for IO mode m , pull mode p methods : init (..), value ( [ v ] ), high (), low (), irq ( handler ) machine . ADC ( pin ) -- make an analog object from a pin methods : read_u16 () machine . PWM ( pin ) -- make a PWM object from a pin methods : deinit (), freq ( [ f ] ), duty_u16 ( [ d ] ), duty_ns ( [ d ] ) machine . I2C ( id ) -- create an I2C object ( id = 0 , 1 ) methods : readfrom ( addr , buf , stop = True ), writeto ( addr , buf , stop = True ) readfrom_mem ( addr , memaddr , arg ), writeto_mem ( addr , memaddr , arg ) machine . SPI ( id , baudrate = 1000000 ) -- create an SPI object ( id = 0 , 1 ) methods : read ( nbytes , write = 0x00 ), write ( buf ), write_readinto ( wr_buf , rd_buf ) machine . Timer ( freq , callback ) -- create a software timer object eg : machine . Timer ( freq = 1 , callback = lambda t : print ( t )) Pins are numbered 0 - 29 , and 26 - 29 have ADC capabilities Pin IO modes are : Pin . IN , Pin . OUT , Pin . ALT Pin pull modes are : Pin . PULL_UP , Pin . PULL_DOWN Useful control commands : CTRL - C -- interrupt a running program CTRL - D -- on a blank line , do a soft reset of the board CTRL - E -- on a blank line , enter paste mode For further help on a specific object , type help ( obj ) For a list of available modules , type help ( 'modules' ) >>> Save Options \u00b6 You can save a python file in Thonny to either the Pico or to your local computer's file system. first stop execution of any program you are running. Background on Thonny \u00b6 Micropython was originally developed by Damien George and first released in 2014. Some support of Thonny is being done the University of Tartu Institute of Computer Science in Estonia. Several features were sponsored by the Raspberry Pi Foundation Thonny web site","title":"Thonny IDE"},{"location":"02c-thonny/#thonny-python-ide","text":"A lightweight Python IDE ideal for writing simple Python programs for first time users. Thonny has the following screen areas.","title":"Thonny Python IDE"},{"location":"02c-thonny/#toolbar","text":"","title":"Toolbar"},{"location":"02c-thonny/#script-area","text":"","title":"Script Area"},{"location":"02c-thonny/#python-shell","text":"","title":"Python Shell"},{"location":"02c-thonny/#interpreter","text":"Thonny runs on Mac, Windows and Linux.","title":"Interpreter"},{"location":"02c-thonny/#running-help","text":"You can enter the help() function in the main script area and then press the Play button. This will tell you 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 MicroPython v1 .14 on 2021 - 02 - 02 ; Raspberry Pi Pico with RP2040 Type \"help()\" for more information . >>> % Run - c $ EDITOR_CONTENT Welcome to MicroPython ! For online help please visit https : // micropython . org / help / . For access to the hardware use the 'machine' module . RP2 specific commands are in the 'rp2' module . Quick overview of some objects : machine . Pin ( pin ) -- get a pin , eg machine . Pin ( 0 ) machine . Pin ( pin , m , [ p ] ) -- get a pin and configure it for IO mode m , pull mode p methods : init (..), value ( [ v ] ), high (), low (), irq ( handler ) machine . ADC ( pin ) -- make an analog object from a pin methods : read_u16 () machine . PWM ( pin ) -- make a PWM object from a pin methods : deinit (), freq ( [ f ] ), duty_u16 ( [ d ] ), duty_ns ( [ d ] ) machine . I2C ( id ) -- create an I2C object ( id = 0 , 1 ) methods : readfrom ( addr , buf , stop = True ), writeto ( addr , buf , stop = True ) readfrom_mem ( addr , memaddr , arg ), writeto_mem ( addr , memaddr , arg ) machine . SPI ( id , baudrate = 1000000 ) -- create an SPI object ( id = 0 , 1 ) methods : read ( nbytes , write = 0x00 ), write ( buf ), write_readinto ( wr_buf , rd_buf ) machine . Timer ( freq , callback ) -- create a software timer object eg : machine . Timer ( freq = 1 , callback = lambda t : print ( t )) Pins are numbered 0 - 29 , and 26 - 29 have ADC capabilities Pin IO modes are : Pin . IN , Pin . OUT , Pin . ALT Pin pull modes are : Pin . PULL_UP , Pin . PULL_DOWN Useful control commands : CTRL - C -- interrupt a running program CTRL - D -- on a blank line , do a soft reset of the board CTRL - E -- on a blank line , enter paste mode For further help on a specific object , type help ( obj ) For a list of available modules , type help ( 'modules' ) >>>","title":"Running help()"},{"location":"02c-thonny/#save-options","text":"You can save a python file in Thonny to either the Pico or to your local computer's file system. first stop execution of any program you are running.","title":"Save Options"},{"location":"02c-thonny/#background-on-thonny","text":"Micropython was originally developed by Damien George and first released in 2014. Some support of Thonny is being done the University of Tartu Institute of Computer Science in Estonia. Several features were sponsored by the Raspberry Pi Foundation Thonny web site","title":"Background on Thonny"},{"location":"03-blink/","text":"Blink in Micropython \u00b6 Overview \u00b6 In this lab, we will use Micropython to make an LED blink on and off using Python. We will assume that an LED is connected to pin GIO16 and is connected via a 330 ohm resistor to ground. Virual Lab \u00b6 Unicorn Emulator Sample Program \u00b6 This program has two parts. The first part is often called the preamble - this code gets executed once and loads the right libraries and initializes global variables. The second part is the main event loop. This program continues to run until the device is powered down or reset. The import machine statement is required to define the characteristics of our physical machine. The import time library is required for the python sleep function. Here is the code that will blink an LED that is connected to PIN GIO16, which is in the upper right corner of the Pico. 1 2 3 4 5 6 7 8 9 10 11 import machine import time # upper right corner pin with USB on the left led = machine . Pin ( 16 , machine . Pin . OUT ) # loop forever while True : led . high () time . sleep ( 0.5 ) led . low () time . sleep ( 0.5 )","title":"Blink"},{"location":"03-blink/#blink-in-micropython","text":"","title":"Blink in Micropython"},{"location":"03-blink/#overview","text":"In this lab, we will use Micropython to make an LED blink on and off using Python. We will assume that an LED is connected to pin GIO16 and is connected via a 330 ohm resistor to ground.","title":"Overview"},{"location":"03-blink/#virual-lab","text":"Unicorn Emulator","title":"Virual Lab"},{"location":"03-blink/#sample-program","text":"This program has two parts. The first part is often called the preamble - this code gets executed once and loads the right libraries and initializes global variables. The second part is the main event loop. This program continues to run until the device is powered down or reset. The import machine statement is required to define the characteristics of our physical machine. The import time library is required for the python sleep function. Here is the code that will blink an LED that is connected to PIN GIO16, which is in the upper right corner of the Pico. 1 2 3 4 5 6 7 8 9 10 11 import machine import time # upper right corner pin with USB on the left led = machine . Pin ( 16 , machine . Pin . OUT ) # loop forever while True : led . high () time . sleep ( 0.5 ) led . low () time . sleep ( 0.5 )","title":"Sample Program"},{"location":"04-servo/","text":"Micropython Servo Lab \u00b6 TBD 1 2 3 4 5 6 7 import machine import pyb # The pyboard has four simple servo connections servo = pyb . Servo ( 1 ) servo . angle ( 90 , 5000 )","title":"Servo"},{"location":"04-servo/#micropython-servo-lab","text":"TBD 1 2 3 4 5 6 7 import machine import pyb # The pyboard has four simple servo connections servo = pyb . Servo ( 1 ) servo . angle ( 90 , 5000 )","title":"Micropython Servo Lab"},{"location":"09-ampy/","text":"","title":"09 ampy"},{"location":"10-display/","text":"Display \u00b6 ssd1306 module \u00b6 SSD1306 Library - click the RAW button and then right click to do a \"Save As\" References \u00b6 https://www.mfitzp.com/article/oled-displays-i2c-micropython/ https://github.com/adafruit/Adafruit_CircuitPython_SSD1306/blob/master/examples/ssd1306_stats.py","title":"Display"},{"location":"10-display/#display","text":"","title":"Display"},{"location":"10-display/#ssd1306-module","text":"SSD1306 Library - click the RAW button and then right click to do a \"Save As\"","title":"ssd1306 module"},{"location":"10-display/#references","text":"https://www.mfitzp.com/article/oled-displays-i2c-micropython/ https://github.com/adafruit/Adafruit_CircuitPython_SSD1306/blob/master/examples/ssd1306_stats.py","title":"References"},{"location":"30-colophon/","text":"Colophone \u00b6 We are mostly a group of unpaid volunteers without a large budget for distributed content management software. However, we still want to provide a great user experience for both our mentors and our students. So we use free open-source tools whenever we can. Here is how we built this site. Our content language is Markdown . We convert Markdown to HTML with mkdocs . Our user interface theme is Mkdocs Material . Our software version control system is git Our site is hosted on GitHub page . We use standard code highlighting provided by the mkdocs codehilite extension. Our BY-NC-SA content license agreement is created by Creative Commons We wish to acknowledge the work of everyone that contributes to open-source projects. Without these systems this work would not be possible. If you would like to contribute lesson we welcome your contribution as a git pull request. You can read our CoderDojo Twin CitiesAuthoring Guide if you would like to help out.","title":"Colophon"},{"location":"30-colophon/#colophone","text":"We are mostly a group of unpaid volunteers without a large budget for distributed content management software. However, we still want to provide a great user experience for both our mentors and our students. So we use free open-source tools whenever we can. Here is how we built this site. Our content language is Markdown . We convert Markdown to HTML with mkdocs . Our user interface theme is Mkdocs Material . Our software version control system is git Our site is hosted on GitHub page . We use standard code highlighting provided by the mkdocs codehilite extension. Our BY-NC-SA content license agreement is created by Creative Commons We wish to acknowledge the work of everyone that contributes to open-source projects. Without these systems this work would not be possible. If you would like to contribute lesson we welcome your contribution as a git pull request. You can read our CoderDojo Twin CitiesAuthoring Guide if you would like to help out.","title":"Colophone"},{"location":"contact/","text":"Cybersecurity for Kids Contacts \u00b6 General Code Savvy Contact \u00b6 kidscode@codesavvy.org Contact for CoderDojo Twin Cities \u00b6 hello@coderdojotc.org Specific questions on this repository \u00b6 Dan McCreary","title":"Contact"},{"location":"contact/#cybersecurity-for-kids-contacts","text":"","title":"Cybersecurity for Kids Contacts"},{"location":"contact/#general-code-savvy-contact","text":"kidscode@codesavvy.org","title":"General Code Savvy Contact"},{"location":"contact/#contact-for-coderdojo-twin-cities","text":"hello@coderdojotc.org","title":"Contact for CoderDojo Twin Cities"},{"location":"contact/#specific-questions-on-this-repository","text":"Dan McCreary","title":"Specific questions on this repository"},{"location":"glossary/","text":"Micropython Glossary of Terms \u00b6 Ampy \u00b6 A micropython command line utility to interact with a CircuitPython or MicroPython board over a serial connection. Ampy is meant to be a simple command line tool to manipulate files and run code on a CircuitPython or MicroPython board over its serial connection. With ampy you can send files from your computer to the board's file system, download files from a board to your computer, and even send a Python script to a board to be executed. Note that ampy by design is meant to be simple and does not support advanced interaction like a shell or terminal to send input to a board. Check out other MicroPython tools like rshell or mpfshell for more advanced interaction with boards. BOOTSEL \u00b6 A button on the pico that when pressed during power up will allow you to mount the device as a USB device. Also known as: Boot Selection Castellated Edge \u00b6 Plated through holes or vias located in the edges of a printed circuit board that make it easier to solder onto another circuit board. The word \"Castellated\" means having grooves or slots on an edge and is derived from the turrets of a castle. ESP32 \u00b6 A series of low-cost, low-power system on a chip microcontrollers with integrated Wi-Fi and dual-mode Bluetooth. Typical costs for the ESP32 is Sample on eBay $5 Sample on Amazon $11 Sample on Sparkfun $21 ESP32 Quick Reference Micropython \u00b6 A set of Python libraries and tools developed specifically for microcontrollers. Micropython was originally developed by Damien George and first released in 2014. It includes many of the features of mainstream Python, while adding a range of new ones designed to take advantage of the facilities available on Raspberry Pi Pico and other microcontroller boards like the ESP32. MPG Shell \u00b6 A simple micropython shell based file explorer for ESP8266 and WiPy Micropython based devices. The shell is a helper for up/downloading files to the ESP8266 (over serial line and Websockets) and WiPy (serial line and telnet). It basically offers commands to list and upload/download files on the flash FS of the device. GitHub Repo for MPFShell Raspberry Pi Foundation \u00b6 The company that builds the Raspberry Pi hardware and provides some software. Raspberry Pi Pico \u00b6 A microcontroller designed by the Raspberry Pi foundation for doing real-time control systems. The Pico was introduces in 2020 with a retail list price of $4. It was a key development because it used a custom chip that had 100 times the RAM of an Arduino Nano. Pico Pinout \u00b6 The Pico pinout has Pinout PDF RP2040 chip \u00b6 A custom chip created by the Raspberry Pi Foundation to power the Raspberry Pi Pico . rshell \u00b6 A simple micropython shell which runs on the host and uses MicroPython's raw-REPL to send python snippets to the pyboard in order to get filesystem information, and to copy files to and from MicroPython's filesystem. It also has the ability to invoke the regular REPL, so rshell can be used as a terminal emulator as well. Note: With rshell you can disable USB Mass Storage and still copy files into and out of your pyboard. RShell GitHub Repo Thonny \u00b6 A lightweight Python IDE ideal for writing simple Python programs for first time users. Thonny runs on Mac, Windows and Linux. Thonny web site UF2 File \u00b6 The file that must be uploaded into the Raspberry Pi Pico folder to allow it to be used. The file name format looks like this: rp2-pico-20210205-unstable-v1.14-8-g1f800cac3.uf2 Unicorn \u00b6 MicroPython on Unicorn is completely open source Micropython emulator Github Repo: https://github.com/micropython/micropython-unicorn","title":"Glossary"},{"location":"glossary/#micropython-glossary-of-terms","text":"","title":"Micropython Glossary of Terms"},{"location":"glossary/#ampy","text":"A micropython command line utility to interact with a CircuitPython or MicroPython board over a serial connection. Ampy is meant to be a simple command line tool to manipulate files and run code on a CircuitPython or MicroPython board over its serial connection. With ampy you can send files from your computer to the board's file system, download files from a board to your computer, and even send a Python script to a board to be executed. Note that ampy by design is meant to be simple and does not support advanced interaction like a shell or terminal to send input to a board. Check out other MicroPython tools like rshell or mpfshell for more advanced interaction with boards.","title":"Ampy"},{"location":"glossary/#bootsel","text":"A button on the pico that when pressed during power up will allow you to mount the device as a USB device. Also known as: Boot Selection","title":"BOOTSEL"},{"location":"glossary/#castellated-edge","text":"Plated through holes or vias located in the edges of a printed circuit board that make it easier to solder onto another circuit board. The word \"Castellated\" means having grooves or slots on an edge and is derived from the turrets of a castle.","title":"Castellated Edge"},{"location":"glossary/#esp32","text":"A series of low-cost, low-power system on a chip microcontrollers with integrated Wi-Fi and dual-mode Bluetooth. Typical costs for the ESP32 is Sample on eBay $5 Sample on Amazon $11 Sample on Sparkfun $21 ESP32 Quick Reference","title":"ESP32"},{"location":"glossary/#micropython","text":"A set of Python libraries and tools developed specifically for microcontrollers. Micropython was originally developed by Damien George and first released in 2014. It includes many of the features of mainstream Python, while adding a range of new ones designed to take advantage of the facilities available on Raspberry Pi Pico and other microcontroller boards like the ESP32.","title":"Micropython"},{"location":"glossary/#mpg-shell","text":"A simple micropython shell based file explorer for ESP8266 and WiPy Micropython based devices. The shell is a helper for up/downloading files to the ESP8266 (over serial line and Websockets) and WiPy (serial line and telnet). It basically offers commands to list and upload/download files on the flash FS of the device. GitHub Repo for MPFShell","title":"MPG Shell"},{"location":"glossary/#raspberry-pi-foundation","text":"The company that builds the Raspberry Pi hardware and provides some software.","title":"Raspberry Pi Foundation"},{"location":"glossary/#raspberry-pi-pico","text":"A microcontroller designed by the Raspberry Pi foundation for doing real-time control systems. The Pico was introduces in 2020 with a retail list price of $4. It was a key development because it used a custom chip that had 100 times the RAM of an Arduino Nano.","title":"Raspberry Pi Pico"},{"location":"glossary/#pico-pinout","text":"The Pico pinout has Pinout PDF","title":"Pico Pinout"},{"location":"glossary/#rp2040-chip","text":"A custom chip created by the Raspberry Pi Foundation to power the Raspberry Pi Pico .","title":"RP2040 chip"},{"location":"glossary/#rshell","text":"A simple micropython shell which runs on the host and uses MicroPython's raw-REPL to send python snippets to the pyboard in order to get filesystem information, and to copy files to and from MicroPython's filesystem. It also has the ability to invoke the regular REPL, so rshell can be used as a terminal emulator as well. Note: With rshell you can disable USB Mass Storage and still copy files into and out of your pyboard. RShell GitHub Repo","title":"rshell"},{"location":"glossary/#thonny","text":"A lightweight Python IDE ideal for writing simple Python programs for first time users. Thonny runs on Mac, Windows and Linux. Thonny web site","title":"Thonny"},{"location":"glossary/#uf2-file","text":"The file that must be uploaded into the Raspberry Pi Pico folder to allow it to be used. The file name format looks like this: rp2-pico-20210205-unstable-v1.14-8-g1f800cac3.uf2","title":"UF2 File"},{"location":"glossary/#unicorn","text":"MicroPython on Unicorn is completely open source Micropython emulator Github Repo: https://github.com/micropython/micropython-unicorn","title":"Unicorn"},{"location":"references/","text":"Microptyhon References \u00b6 http://micropython.org/","title":"References"},{"location":"references/#microptyhon-references","text":"http://micropython.org/","title":"Microptyhon References"}]}