{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CoderDojo Twin Cities Micropython This GitHub repository is for sharing teaching resources to teach Micropython 12-14 years old. Course Outline Introduction - Overview of Micropython and why we love it. Boards - Description of popular development boards that support Micropython (Pico and ESP32). How to choose the right microcontroller for your project. Raspberry Pi Pico - Details the Raspberry Pi Pico including features and pinouts. Thonny IDE - Thonny is an IDE that supports Micropython. We review the parts of the User interface. Blink - Blink an LED on and off. This is the equivalent of the \"Hello World!\" program in micropython. Servo - Move a Servo. Glossary of Micropython Terms Contact Micropython References - links to other useful sites.","title":"CoderDojo Twin Cities Micropython"},{"location":"#coderdojo-twin-cities-micropython","text":"This GitHub repository is for sharing teaching resources to teach Micropython 12-14 years old.","title":"CoderDojo Twin Cities Micropython"},{"location":"#course-outline","text":"Introduction - Overview of Micropython and why we love it. Boards - Description of popular development boards that support Micropython (Pico and ESP32). How to choose the right microcontroller for your project. Raspberry Pi Pico - Details the Raspberry Pi Pico including features and pinouts. Thonny IDE - Thonny is an IDE that supports Micropython. We review the parts of the User interface. Blink - Blink an LED on and off. This is the equivalent of the \"Hello World!\" program in micropython. Servo - Move a Servo. Glossary of Micropython Terms Contact Micropython References - links to other useful sites.","title":"Course Outline"},{"location":"01-intro/","text":"Introduction to Micropython What is Micropython Why we love it Virtual emulators Hardware Costs Connections","title":"Introduction"},{"location":"01-intro/#introduction-to-micropython","text":"What is Micropython Why we love it Virtual emulators Hardware Costs Connections","title":"Introduction to Micropython"},{"location":"02-boards/","text":"Micropython Boards Technically, any computer that has at least 16K of RAM can run Micropython. ESP32 ESP32 - $5 to $21 Raspberry Pi Pico Raspberry Pi Pico (../glossary.md#ESP32) - $4 Getting Machine Statistics 1 2 import machine help ( machine )","title":"Boards"},{"location":"02-boards/#micropython-boards","text":"Technically, any computer that has at least 16K of RAM can run Micropython.","title":"Micropython Boards"},{"location":"02-boards/#esp32","text":"ESP32 - $5 to $21","title":"ESP32"},{"location":"02-boards/#raspberry-pi-pico","text":"Raspberry Pi Pico (../glossary.md#ESP32) - $4","title":"Raspberry Pi Pico"},{"location":"02-boards/#getting-machine-statistics","text":"1 2 import machine help ( machine )","title":"Getting Machine Statistics"},{"location":"02-pi-pico/","text":"Getting Started with the Raspberry Pi Pico The Raspberry Pi Pico is a custom silicon microcontroller built by the Raspberry Pi Foundation with a retail list prices of $4. With 264K SRAM, it has around 100 times the RAM of an Arduino Uno (2K). It is ideal for projects that need more RAM such as project that require drawing to an OLED display. Specs RP2040 microcontroller chip designed by Raspberry Pi in the United Kingdom Dual-core Arm Cortex M0+ processor, flexible clock running up to 133 MHz 264KB of SRAM, and 2MB of on-board Flash memory Castellated module allows soldering direct to carrier boards USB 1.1 with device and host support Low-power sleep and dormant modes Drag-and-drop programming using mass storage over USB 26 \u00d7 multi-function GPIO pins 2 \u00d7 SPI, 2 \u00d7 I2C, 2 \u00d7 UART, 3 \u00d7 12-bit ADC, 16 \u00d7 controllable PWM channels Accurate clock and timer on-chip Temperature sensor Accelerated floating-point libraries on-chip 8 \u00d7 Programmable I/O (PIO) state machines for custom peripheral support Pico Pinout The pinout diagram for the Raspberry Pi. It features: * 26 \u00d7 multi-function GPIO pins * 2 \u00d7 SPI, 2 \u00d7 I2C, 2 \u00d7 UART, 3 \u00d7 12-bit ADC, 16 \u00d7 controllable PWM * Pinout PDF Pins are numbered 0-29, and 26-29 have ADC capabilities Pin IO modes are: Pin.IN, Pin.OUT, Pin.ALT Pin pull modes are: Pin.PULL_UP, Pin.PULL_DOWN Steps To Get Micropython Running on the Mac Download the MicroPython UF2 file. Push and hold the BOOTSEL button and plug your Pico into the USB port of your Raspberry Pi or other computer. Release the BOOTSEL button after your Pico is connected. It will mount as a Mass Storage Device called RPI-RP2. Drag and drop the MicroPython UF2 file onto the RPI-RP2 volume. Your Pico will reboot. You are now running MicroPython. Using Thonny Thonny is a free lightweight Python development tool. Download the Thonny Application Download the Thonny Pico driver Configure Thonny to use the Pico interpreter Test using the help() function Test by running a blink application 1 2 3 4 5 6 7 8 9 from machine import Pin import utime # right uppermost pin with USB on the left led = Pin ( 16 , Pin . OUT ) led . low () while True : led . toggle () utime . sleep ( 1 ) Press the Play Button References Getting Started Guide Raspberry Pi Getting Started Book PDF Commons Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)","title":"Raspberry Pi Pico"},{"location":"02-pi-pico/#getting-started-with-the-raspberry-pi-pico","text":"The Raspberry Pi Pico is a custom silicon microcontroller built by the Raspberry Pi Foundation with a retail list prices of $4. With 264K SRAM, it has around 100 times the RAM of an Arduino Uno (2K). It is ideal for projects that need more RAM such as project that require drawing to an OLED display.","title":"Getting Started with the Raspberry Pi Pico"},{"location":"02-pi-pico/#specs","text":"RP2040 microcontroller chip designed by Raspberry Pi in the United Kingdom Dual-core Arm Cortex M0+ processor, flexible clock running up to 133 MHz 264KB of SRAM, and 2MB of on-board Flash memory Castellated module allows soldering direct to carrier boards USB 1.1 with device and host support Low-power sleep and dormant modes Drag-and-drop programming using mass storage over USB 26 \u00d7 multi-function GPIO pins 2 \u00d7 SPI, 2 \u00d7 I2C, 2 \u00d7 UART, 3 \u00d7 12-bit ADC, 16 \u00d7 controllable PWM channels Accurate clock and timer on-chip Temperature sensor Accelerated floating-point libraries on-chip 8 \u00d7 Programmable I/O (PIO) state machines for custom peripheral support","title":"Specs"},{"location":"02-pi-pico/#pico-pinout","text":"The pinout diagram for the Raspberry Pi. It features: * 26 \u00d7 multi-function GPIO pins * 2 \u00d7 SPI, 2 \u00d7 I2C, 2 \u00d7 UART, 3 \u00d7 12-bit ADC, 16 \u00d7 controllable PWM * Pinout PDF Pins are numbered 0-29, and 26-29 have ADC capabilities Pin IO modes are: Pin.IN, Pin.OUT, Pin.ALT Pin pull modes are: Pin.PULL_UP, Pin.PULL_DOWN","title":"Pico Pinout"},{"location":"02-pi-pico/#steps-to-get-micropython-running-on-the-mac","text":"Download the MicroPython UF2 file. Push and hold the BOOTSEL button and plug your Pico into the USB port of your Raspberry Pi or other computer. Release the BOOTSEL button after your Pico is connected. It will mount as a Mass Storage Device called RPI-RP2. Drag and drop the MicroPython UF2 file onto the RPI-RP2 volume. Your Pico will reboot. You are now running MicroPython.","title":"Steps To Get Micropython Running on the Mac"},{"location":"02-pi-pico/#using-thonny","text":"Thonny is a free lightweight Python development tool. Download the Thonny Application Download the Thonny Pico driver Configure Thonny to use the Pico interpreter Test using the help() function Test by running a blink application 1 2 3 4 5 6 7 8 9 from machine import Pin import utime # right uppermost pin with USB on the left led = Pin ( 16 , Pin . OUT ) led . low () while True : led . toggle () utime . sleep ( 1 ) Press the Play Button","title":"Using Thonny"},{"location":"02-pi-pico/#references","text":"","title":"References"},{"location":"02-pi-pico/#getting-started-guide","text":"Raspberry Pi Getting Started","title":"Getting Started Guide"},{"location":"02-pi-pico/#book-pdf","text":"Commons Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)","title":"Book PDF"},{"location":"02c-thonny/","text":"Thonny Python IDE A lightweight Python IDE ideal for writing simple Python programs for first time users. Thonny has the following screen areas. Toolbar Script Area Python Shell Interpreter Thonny runs on Mac, Windows and Linux. Running help() You can enter the help() function in the main script area and then press the Play button. This will tell you 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 MicroPython v1 .14 on 2021 - 02 - 02 ; Raspberry Pi Pico with RP2040 Type \"help()\" for more information . >>> % Run - c $ EDITOR_CONTENT Welcome to MicroPython ! For online help please visit https : // micropython . org / help / . For access to the hardware use the 'machine' module . RP2 specific commands are in the 'rp2' module . Quick overview of some objects : machine . Pin ( pin ) -- get a pin , eg machine . Pin ( 0 ) machine . Pin ( pin , m , [ p ] ) -- get a pin and configure it for IO mode m , pull mode p methods : init (..), value ( [ v ] ), high (), low (), irq ( handler ) machine . ADC ( pin ) -- make an analog object from a pin methods : read_u16 () machine . PWM ( pin ) -- make a PWM object from a pin methods : deinit (), freq ( [ f ] ), duty_u16 ( [ d ] ), duty_ns ( [ d ] ) machine . I2C ( id ) -- create an I2C object ( id = 0 , 1 ) methods : readfrom ( addr , buf , stop = True ), writeto ( addr , buf , stop = True ) readfrom_mem ( addr , memaddr , arg ), writeto_mem ( addr , memaddr , arg ) machine . SPI ( id , baudrate = 1000000 ) -- create an SPI object ( id = 0 , 1 ) methods : read ( nbytes , write = 0x00 ), write ( buf ), write_readinto ( wr_buf , rd_buf ) machine . Timer ( freq , callback ) -- create a software timer object eg : machine . Timer ( freq = 1 , callback = lambda t : print ( t )) Pins are numbered 0 - 29 , and 26 - 29 have ADC capabilities Pin IO modes are : Pin . IN , Pin . OUT , Pin . ALT Pin pull modes are : Pin . PULL_UP , Pin . PULL_DOWN Useful control commands : CTRL - C -- interrupt a running program CTRL - D -- on a blank line , do a soft reset of the board CTRL - E -- on a blank line , enter paste mode For further help on a specific object , type help ( obj ) For a list of available modules , type help ( 'modules' ) >>> Save Options You can save a python file in Thonny to either the Pico or to your local computer's file system. first stop execution of any program you are running. Background on Thonny Micropython was originally developed by Damien George and first released in 2014. Some support of Thonny is being done the University of Tartu Institute of Computer Science in Estonia. Several features were sponsored by the Raspberry Pi Foundation Thonny web site","title":"Thonny Python IDE"},{"location":"02c-thonny/#thonny-python-ide","text":"A lightweight Python IDE ideal for writing simple Python programs for first time users. Thonny has the following screen areas.","title":"Thonny Python IDE"},{"location":"02c-thonny/#toolbar","text":"","title":"Toolbar"},{"location":"02c-thonny/#script-area","text":"","title":"Script Area"},{"location":"02c-thonny/#python-shell","text":"","title":"Python Shell"},{"location":"02c-thonny/#interpreter","text":"Thonny runs on Mac, Windows and Linux.","title":"Interpreter"},{"location":"02c-thonny/#running-help","text":"You can enter the help() function in the main script area and then press the Play button. This will tell you 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 MicroPython v1 .14 on 2021 - 02 - 02 ; Raspberry Pi Pico with RP2040 Type \"help()\" for more information . >>> % Run - c $ EDITOR_CONTENT Welcome to MicroPython ! For online help please visit https : // micropython . org / help / . For access to the hardware use the 'machine' module . RP2 specific commands are in the 'rp2' module . Quick overview of some objects : machine . Pin ( pin ) -- get a pin , eg machine . Pin ( 0 ) machine . Pin ( pin , m , [ p ] ) -- get a pin and configure it for IO mode m , pull mode p methods : init (..), value ( [ v ] ), high (), low (), irq ( handler ) machine . ADC ( pin ) -- make an analog object from a pin methods : read_u16 () machine . PWM ( pin ) -- make a PWM object from a pin methods : deinit (), freq ( [ f ] ), duty_u16 ( [ d ] ), duty_ns ( [ d ] ) machine . I2C ( id ) -- create an I2C object ( id = 0 , 1 ) methods : readfrom ( addr , buf , stop = True ), writeto ( addr , buf , stop = True ) readfrom_mem ( addr , memaddr , arg ), writeto_mem ( addr , memaddr , arg ) machine . SPI ( id , baudrate = 1000000 ) -- create an SPI object ( id = 0 , 1 ) methods : read ( nbytes , write = 0x00 ), write ( buf ), write_readinto ( wr_buf , rd_buf ) machine . Timer ( freq , callback ) -- create a software timer object eg : machine . Timer ( freq = 1 , callback = lambda t : print ( t )) Pins are numbered 0 - 29 , and 26 - 29 have ADC capabilities Pin IO modes are : Pin . IN , Pin . OUT , Pin . ALT Pin pull modes are : Pin . PULL_UP , Pin . PULL_DOWN Useful control commands : CTRL - C -- interrupt a running program CTRL - D -- on a blank line , do a soft reset of the board CTRL - E -- on a blank line , enter paste mode For further help on a specific object , type help ( obj ) For a list of available modules , type help ( 'modules' ) >>>","title":"Running help()"},{"location":"02c-thonny/#save-options","text":"You can save a python file in Thonny to either the Pico or to your local computer's file system. first stop execution of any program you are running.","title":"Save Options"},{"location":"02c-thonny/#background-on-thonny","text":"Micropython was originally developed by Damien George and first released in 2014. Some support of Thonny is being done the University of Tartu Institute of Computer Science in Estonia. Several features were sponsored by the Raspberry Pi Foundation Thonny web site","title":"Background on Thonny"},{"location":"03-blink/","text":"Blink in Micropython Overview In this lab, we will use Micropython to make an LED blink on and off using Python. We will assume that an LED is connected to pin GIO16 and is connected via a 330 ohm resistor to ground. Virual Lab Unicorn Emulator Sample Program This program has two parts. The first part is often called the preamble - this code gets executed once and loads the right libraries and initializes global variables. The second part is the main event loop. This program continues to run until the device is powered down or reset. The import machine statement is required to define the characteristics of our physical machine. The import time library is required for the python sleep function. Here is the code that will blink an LED that is connected to PIN GIO16, which is in the upper right corner of the Pico. 1 2 3 4 5 6 7 8 9 10 11 import machine import time # upper right corner pin with USB on the left led = machine . Pin ( 16 , machine . Pin . OUT ) # loop forever while True : led . high () time . sleep ( 0.5 ) led . low () time . sleep ( 0.5 )","title":"Blink"},{"location":"03-blink/#blink-in-micropython","text":"","title":"Blink in Micropython"},{"location":"03-blink/#overview","text":"In this lab, we will use Micropython to make an LED blink on and off using Python. We will assume that an LED is connected to pin GIO16 and is connected via a 330 ohm resistor to ground.","title":"Overview"},{"location":"03-blink/#virual-lab","text":"Unicorn Emulator","title":"Virual Lab"},{"location":"03-blink/#sample-program","text":"This program has two parts. The first part is often called the preamble - this code gets executed once and loads the right libraries and initializes global variables. The second part is the main event loop. This program continues to run until the device is powered down or reset. The import machine statement is required to define the characteristics of our physical machine. The import time library is required for the python sleep function. Here is the code that will blink an LED that is connected to PIN GIO16, which is in the upper right corner of the Pico. 1 2 3 4 5 6 7 8 9 10 11 import machine import time # upper right corner pin with USB on the left led = machine . Pin ( 16 , machine . Pin . OUT ) # loop forever while True : led . high () time . sleep ( 0.5 ) led . low () time . sleep ( 0.5 )","title":"Sample Program"},{"location":"04-servo/","text":"Micropython Servo Lab TBD 1 2 3 4 5 6 7 import machine import pyb # The pyboard has four simple servo connections servo = pyb . Servo ( 1 ) servo . angle ( 90 , 5000 )","title":"Servo"},{"location":"04-servo/#micropython-servo-lab","text":"TBD 1 2 3 4 5 6 7 import machine import pyb # The pyboard has four simple servo connections servo = pyb . Servo ( 1 ) servo . angle ( 90 , 5000 )","title":"Micropython Servo Lab"},{"location":"10-display/","text":"Display References https://github.com/adafruit/Adafruit_CircuitPython_SSD1306/blob/master/examples/ssd1306_stats.py","title":"Display"},{"location":"10-display/#display","text":"","title":"Display"},{"location":"10-display/#references","text":"https://github.com/adafruit/Adafruit_CircuitPython_SSD1306/blob/master/examples/ssd1306_stats.py","title":"References"},{"location":"contact/","text":"Cybersecurity for Kids Contacts General Code Savvy Contact kidscode@codesavvy.org Contact for CoderDojo Twin Cities hello@coderdojotc.org Specific questions on this repository Dan McCreary","title":"Contact"},{"location":"contact/#cybersecurity-for-kids-contacts","text":"","title":"Cybersecurity for Kids Contacts"},{"location":"contact/#general-code-savvy-contact","text":"kidscode@codesavvy.org","title":"General Code Savvy Contact"},{"location":"contact/#contact-for-coderdojo-twin-cities","text":"hello@coderdojotc.org","title":"Contact for CoderDojo Twin Cities"},{"location":"contact/#specific-questions-on-this-repository","text":"Dan McCreary","title":"Specific questions on this repository"},{"location":"glossary/","text":"Micropython Glossary of Terms BOOTSEL A button on the pico that when pressed during power up will allow you to mount the device as a USB device. Also known as: Boot Selection Castellated Edge Plated through holes or vias located in the edges of a printed circuit board that make it easier to solder onto another circuit board. The word \"Castellated\" means having grooves or slots on an edge and is derived from the turrets of a castle. ESP32 A series of low-cost, low-power system on a chip microcontrollers with integrated Wi-Fi and dual-mode Bluetooth. Typical costs for the ESP32 is Sample on eBay $5 Sample on Amazon $11 Sample on Sparkfun $21 ESP32 Quick Reference Micropython A set of Python libraries and tools developed specifically for microcontrollers. Micropython was originally developed by Damien George and first released in 2014. It includes many of the features of mainstream Python, while adding a range of new ones designed to take advantage of the facilities available on Raspberry Pi Pico and other microcontroller boards like the ESP32. Raspberry Pi Foundation The company that builds the Raspberry Pi hardware and provides some software. Raspberry Pi Pico A microcontroller designed by the Raspberry Pi foundation for doing real-time control systems. The Pico was introduces in 2020 with a retail list price of $4. It was a key development because it used a custom chip that had 100 times the RAM of an Arduino Nano. Pico Pinout The Pico pinout has Pinout PDF RP2040 chip A custom chip created by the Raspberry Pi Foundation to power the Raspberry Pi Pico . Thonny A lightweight Python IDE ideal for writing simple Python programs for first time users. Thonny runs on Mac, Windows and Linux. Thonny web site UF2 File The file that must be uploaded into the Raspberry Pi Pico folder to allow it to be used. The file name format looks like this: rp2-pico-20210205-unstable-v1.14-8-g1f800cac3.uf2 Unicorn MicroPython on Unicorn is completely open source Micropython emulator Github Repo: https://github.com/micropython/micropython-unicorn","title":"Glossary"},{"location":"glossary/#micropython-glossary-of-terms","text":"","title":"Micropython Glossary of Terms"},{"location":"glossary/#bootsel","text":"A button on the pico that when pressed during power up will allow you to mount the device as a USB device. Also known as: Boot Selection","title":"BOOTSEL"},{"location":"glossary/#castellated-edge","text":"Plated through holes or vias located in the edges of a printed circuit board that make it easier to solder onto another circuit board. The word \"Castellated\" means having grooves or slots on an edge and is derived from the turrets of a castle.","title":"Castellated Edge"},{"location":"glossary/#esp32","text":"A series of low-cost, low-power system on a chip microcontrollers with integrated Wi-Fi and dual-mode Bluetooth. Typical costs for the ESP32 is Sample on eBay $5 Sample on Amazon $11 Sample on Sparkfun $21 ESP32 Quick Reference","title":"ESP32"},{"location":"glossary/#micropython","text":"A set of Python libraries and tools developed specifically for microcontrollers. Micropython was originally developed by Damien George and first released in 2014. It includes many of the features of mainstream Python, while adding a range of new ones designed to take advantage of the facilities available on Raspberry Pi Pico and other microcontroller boards like the ESP32.","title":"Micropython"},{"location":"glossary/#raspberry-pi-foundation","text":"The company that builds the Raspberry Pi hardware and provides some software.","title":"Raspberry Pi Foundation"},{"location":"glossary/#raspberry-pi-pico","text":"A microcontroller designed by the Raspberry Pi foundation for doing real-time control systems. The Pico was introduces in 2020 with a retail list price of $4. It was a key development because it used a custom chip that had 100 times the RAM of an Arduino Nano.","title":"Raspberry Pi Pico"},{"location":"glossary/#pico-pinout","text":"The Pico pinout has Pinout PDF","title":"Pico Pinout"},{"location":"glossary/#rp2040-chip","text":"A custom chip created by the Raspberry Pi Foundation to power the Raspberry Pi Pico .","title":"RP2040 chip"},{"location":"glossary/#thonny","text":"A lightweight Python IDE ideal for writing simple Python programs for first time users. Thonny runs on Mac, Windows and Linux. Thonny web site","title":"Thonny"},{"location":"glossary/#uf2-file","text":"The file that must be uploaded into the Raspberry Pi Pico folder to allow it to be used. The file name format looks like this: rp2-pico-20210205-unstable-v1.14-8-g1f800cac3.uf2","title":"UF2 File"},{"location":"glossary/#unicorn","text":"MicroPython on Unicorn is completely open source Micropython emulator Github Repo: https://github.com/micropython/micropython-unicorn","title":"Unicorn"},{"location":"references/","text":"Microptyhon References http://micropython.org/","title":"References"},{"location":"references/#microptyhon-references","text":"http://micropython.org/","title":"Microptyhon References"}]}